#!/usr/bin/python

# (c) 2013, Paul Markham <pmarkham@netrefinery.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import platform
import tempfile

DOCUMENTATION = '''
---
module: zone
short_description: Manage Solaris zones
description:
   - Create, start, stop and delete Solaris zones. This module doesn't currently allow
     changing of options for a zone that's already been created.
version_added: "1.5"
author: Paul Markham
requirements:
  - Solaris 10 or later
options:
  state:
    required: true
    description:
      - C(present), create the zone.
        C(running), if the zone already exists, boot it, otherwise, create the zone
          first, then boot it.
        C(stopped), shutdown a zone.
        C(absent), destroy the zone.
    choices: ['present', 'running', 'stopped', 'absent']
  name:
    description:
      - Zone name.
    required: true
  path:
    description:
      - The path where the zone will be created. This is required when the zone is created, but not
        used otherwise.
    required: false
    default: null
  whole_root:
    description:
      - Whether to create a whole root (C(true)) or sparse root (C(false)) zone.
    required: false
    default: false
  root_password:
    description:
      - The password hash for the root account. If not specified, the zone's root account
        will not have a password.
    required: false
    default: null
  config:
    required: false
    description:
      - 'The zonecfg configuration commands for this zone, separated by commas, e.g.
        "set auto-boot=true,add net,set physical=bge0,set address=10.1.1.1,end"
        See the Solaris Systems Administrator guide for a list of all configuration commands
        that can be used.'
    required: false
    default: null
  timeout:
    description:
      - Timeout, in seconds, for zone to boot.
    required: false
    default: 600
'''

EXAMPLES = '''
# Create a zone, but don't boot it
zone: name=zone1 state=present path=/zones/zone1 whole_root=true root_password="Be9oX7OSwWoU."
      config='set autoboot=true, add net, set physical=bge0, set address=10.1.1.1, end'

# Create a zone and boot it
zone: name=zone1 state=running path=/zones/zone1 whole_root=true root_password="Be9oX7OSwWoU."
      config='set autoboot=true, add net, set physical=bge0, set address=10.1.1.1, end'

# Boot an already created zone
zone: name=zone1 state=running

# Stop a zone
zone: name=zone1 state=stopped

# Destroy a zone
zone: name=zone1 state=absent
'''

class Zone(object):
    def __init__(self, module):
        self.module                = module
        self.path                  = self.module.params['path']
        self.name                  = self.module.params['name']
        self.whole_root            = self.module.params['whole_root']
        self.timeout               = self.module.params['timeout']
        self.config                = self.module.params['config']

        self.zoneadm_cmd           = self.module.get_bin_path('zoneadm', True)
        self.zonecfg_cmd           = self.module.get_bin_path('zonecfg', True)
        self.ssh_keygen_cmd        = self.module.get_bin_path('ssh-keygen', True)
        
        self.root_password         = self.module.params['root_password']
        self.user_account          = self.module.params['user_account']
        self.user_password         = self.module.params['user_password']
        self.solaris_timezone      = self.module.params['solaris_timezone']
        self.solaris_environment   = self.module.params['solaris_environment']
        self.solaris_keymap        = self.module.params['solaris_keymap']
 

    def create(self):
        if not self.path:
            self.module.fail_json(msg='Missing required argument: path')

        t = tempfile.NamedTemporaryFile(delete = False)
        configxml = tempfile.NamedTemporaryFile(delete = False, suffix = ".xml")
        configxml.write("""<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="profile" name="sysconfig">
  <service version="1" type="service" name="system/config-user">
    <instance enabled="true" name="default">
      <property_group type="application" name="root_account">
        <propval type="astring" name="login" value="root"/>
        <propval type="astring" name="password" value="%s"/>
        <propval type="astring" name="type" value="role"/>
      </property_group>
      <property_group type="application" name="user_account">
        <propval type="astring" name="login" value="%s"/>
        <propval type="astring" name="password" value="%s"/>
        <propval type="astring" name="type" value="normal"/>
        <propval type="astring" name="description" value=""/>
        <propval type="count" name="gid" value="10"/>
        <propval type="astring" name="shell" value="/usr/bin/bash"/>
        <propval type="astring" name="roles" value="root"/>
        <propval type="astring" name="profiles" value="System Administrator"/>
        <propval type="astring" name="sudoers" value="ALL=(ALL) ALL"/>
      </property_group>
    </instance>
  </service>
  <service version="1" type="service" name="system/timezone">
    <instance enabled="true" name="default">
      <property_group type="application" name="timezone">
        <propval type="astring" name="localtime" value="%s"/>
      </property_group>
    </instance>
  </service>
  <service version="1" type="service" name="system/environment">
    <instance enabled="true" name="init">
      <property_group type="application" name="environment">
        <propval type="astring" name="LANG" value="%s"/>
      </property_group>
    </instance>
  </service>
  <service version="1" type="service" name="system/identity">
    <instance enabled="true" name="node">
      <property_group type="application" name="config">
        <propval type="astring" name="nodename" value="%s"/>
      </property_group>
    </instance>
  </service>
  <service version="1" type="service" name="system/keymap">
    <instance enabled="true" name="default">
      <property_group type="system" name="keymap">
        <propval type="astring" name="layout" value="%s"/>
      </property_group>
    </instance>
  </service>
  <service version="1" type="service" name="system/console-login">
    <instance enabled="true" name="default">
      <property_group type="application" name="ttymon">
        <propval type="astring" name="terminal_type" value="sun-color"/>
      </property_group>
    </instance>
  </service>
  <service version="1" type="service" name="network/physical">
    <instance enabled="true" name="default">
      <property_group type="application" name="netcfg">
        <propval type="astring" name="active_ncp" value="Automatic"/>
      </property_group>
    </instance>
  </service>
</service_bundle>
""" % (self.root_password, self.user_account, self.user_password, self.solaris_timezone, self.solaris_environment, self.name, self.solaris_keymap))
        configxml.close()      
  
        if self.whole_root:
            t.write('create -b\n')
        else:
            t.write('create\n')

        t.write('set zonepath=%s\n' % self.path)

        if self.config:
            for line in self.config:
                t.write('%s\n' % line)
        t.close()

        cmd = '%s -z %s -f %s' % (self.zonecfg_cmd, self.name, t.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc != 0:
            self.module.fail_json(msg='Failed to create zone. %s' % (out + err))
        os.unlink(t.name)

        cmd = '%s -z %s install -c %s' % (self.zoneadm_cmd, self.name, configxml.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc != 0:
            self.module.fail_json(msg='Failed to install zone. %s' % (out + err))

            
    def boot(self):
        cmd = '%s -z %s boot' % (self.zoneadm_cmd, self.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc != 0:
            self.module.fail_json(msg='Failed to boot zone. %s' % (out + err))

        """
        The boot command can return before the zone has fully booted. This is especially
        true on the first boot when the zone initializes the SMF services. Unless the zone
        has fully booted, subsequent tasks in the playbook may fail as services aren't running yet.
        Wait until the zone's console login is running; once that's running, consider the zone booted.
        """

        elapsed = 0
        while True:
            if elapsed > self.timeout:
                self.module.fail_json(msg='timed out waiting for zone to boot')
            rc = os.system('ps -z %s -o args|grep "/.*/ttymon.*-d /dev/console" > /dev/null 2>/dev/null' % self.name)
            if elapsed > 40:
                break
            if rc == 0:
                break
            time.sleep(10)
            elapsed += 10

    def destroy(self):
        cmd = '%s -z %s delete -F' % (self.zonecfg_cmd, self.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc != 0:
            self.module.fail_json(msg='Failed to delete zone. %s' % (out + err))

    def stop(self):
        cmd = '%s -z %s halt' % (self.zoneadm_cmd, self.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc != 0:
            self.module.fail_json(msg='Failed to stop zone. %s' % (out + err))

    def exists(self):
        cmd = '%s -z %s list' % (self.zoneadm_cmd, self.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc == 0:
            return True
        else:
            return False

    def running(self):
        cmd = '%s -z %s list -p' % (self.zoneadm_cmd, self.name)
        (rc, out, err) = self.module.run_command(cmd)
        if rc != 0:
            self.module.fail_json(msg='Failed to determine zone state. %s' % (out + err))

        if out.split(':')[2] == 'running':
            return True
        else:
            return False

def main():
    module = AnsibleModule(
        argument_spec     = dict(
            name                = dict(required=True),
            state               = dict(required=True, choices=['running', 'present', 'stopped', 'absent']),
            path                = dict(defalt=None),
            whole_root          = dict(default=False, type='bool'),
            root_password       = dict(default=None),
            timeout             = dict(default=600, type='int'),
            config              = dict(default=None, type='list'),
            user_account        = dict(default=None),
            user_password       = dict(default=None),
            solaris_timezone    = dict(default='US/Central'),
            solaris_environment = dict(default='en_US.UTF-8'),
            solaris_keymap      = dict(default='US-English'),
            ),
        supports_check_mode=True
    )

    zone = Zone(module)
    
    state = module.params['state']

    if state == 'running':
        changed = False
        msg = ''
        if module.check_mode:
            if zone.exists():
                if zone.running():
                    changed = False
                    msg += 'zone already running'
                else:
                    changed = True
                    msg += 'zone booted'
            else:
                changed = True
                msg += 'zone created zone booted'
        else:
            if not zone.exists():
                zone.create()
                changed = True
                msg += 'zone created '
            if zone.running():
                msg += 'zone already running'
            else:
                zone.boot()
                changed = True
                msg += 'zone booted'
        module.exit_json(changed=changed, msg=msg)

    if state == 'present':
        if zone.exists():
            module.exit_json(changed=False, msg='zone already present')
        else:
            if not module.check_mode:
                zone.create()
            module.exit_json(changed=True, msg='zone created')

    if state == 'stopped':
        if zone.exists():
            if zone.running():
                if not module.check_mode:
                    zone.stop()
                module.exit_json(changed=True, msg='zone stopped')
            else:
                module.exit_json(changed=False, msg='zone not running')
        else:
            module.fail_json(msg='zone does not exist')

    if state == 'absent':
        if zone.exists():
            if not module.check_mode:
                zone.stop()
                zone.destroy()
            module.exit_json(changed=True, msg='zone deleted')
        else:
            module.exit_json(changed=False, msg='zone not present')

    module.fail_json(msg='Invalid state: %s' % state)

from ansible.module_utils.basic import *
main()
